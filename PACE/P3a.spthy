theory P3a
begin

section{* 1.3 Introducing a Session Key *}

/*
  Protocol:
    1. A -> B: x
    2. B -> A: y
    3. A -> B: ['A', 'B', x]_kab
    4. B -> A: ['B', 'A', y]_kab

*/

functions:
  mac/2, vfy/3, true/0, kdf/3

equations:
  vfy(k, mac(k, msg1), msg1) = true

// Key Infrastructure
rule Shared_Key:
  [ Fr(~sk)
  ]
--[ UniDKey($A, $B, ~sk)
  ]->
  [ !SKey($A, $B, ~sk)
  ]

rule Reveal_SKey_A:
    [ !SKey(A, B, k) 
    ]
  --[ Reveal(A) 
    ]->
    [ Out(k) 
    ]

rule Reveal_SKey_B:
    [ !SKey(A, B, k) 
    ]
  --[ Reveal(B) 
    ]->
    [ Out(k) 
    ]


// -- Protocol Rules --
// Thread Initialization

rule Init_A:
    [ Fr(~id)
    , !SKey(A, B, k1)
    , !SKey(B, A, k2)
    ]
  --[ Create(A, ~id, 'Alice', k1, k2)
    ]->
    [ St_A_1(A, ~id, B, k1, k2)
    ]

rule Init_B:
    [ Fr(~id)
    , !SKey(A, B, k1)
    , !SKey(B, A, k2)
    ]
  --[ Create(B, ~id, 'Bob', k1, k2)
    ]->
    [ St_B_1(B, ~id, A, k1, k2)
    ]

// Protocol Messages

rule A_1_Send:
    [ St_A_1(A, id, B, k1, k2)
    , Fr(~x)
    ]
  --[ Send(A, ~x)
    ]->
    [ St_A_2(A, id, B, k1, k2, ~x)
    , Out(~x)
    ]

rule B_1_Receive:
    [ St_B_1(B, id, A, k1, k2)
    , In(x)
    ]
  --[ Recv(B, x)
    ]->
    [ St_B_2(B, id, A, k1, k2, x)
    ]

rule B_2_Send:
    [ St_B_2(B, id, A, k1, k2, x)
    , Fr(~y)
    ]
  --[ Send(B, ~y)
    , Running(B, A, <'I', 'R', x, ~y>)
    ]->
    [ St_B_3(B, id, A, k1, k2, x, ~y)
    , Out(~y)
    ]

rule A_2_Receive:
    [ St_A_2(A, id, B, k1, k2, x)
    , In(y)
    ]
  --[ Recv(A, y)
    , Running(A, B, <'R', 'I', x, y>)
    ]->
    [ St_A_3(A, id, B, k1, k2, x, y)
    ]

rule A_3_Send:
    let
      kab = kdf(k1, x, y)
    in
    [ St_A_3(A, id, B, k1, k2, x, y)
    ]
  --[ Send(A, mac(kab, <'A', 'B', y>))
    ]->
    [ St_A_4(A, id, B, k1, k2, x, y, kab, mac(kab, <'A', 'B', y>))
    , Out(mac(kab, <'A', 'B', y>))
    ]

rule B_3_Receive:
    let
      kab = kdf(k1, x, y)
    in
    [ St_B_3(B, id, A, k1, k2, x, y)
    , In(mac(kab, <'A', 'B', y>))
    ]
  --[ Recv(B, mac(kab, <'A', 'B', y>))
    , Eq(vfy(kab, mac(kab, <'A', 'B', y>), <'A', 'B', y>), true)
    , Authenticated(A, B)
    , Commit(B, A, <'R', 'I', x, y>)
    , Secret(A, B, kab)
    ]->
    [ St_B_4(B, id, A, k1, k2, x, y, kab, mac(kab, <'A', 'B', y>))
    ]

rule B_4_Send:
    [ St_B_4(B, id, A, k1, k2, x, y, kab,  mac(kab, <'A', 'B', y>))
    ]
  --[ Send(B, mac(kab, <'B', 'A', x>))
    ]->
    [ St_B_5(B, id, A, k1, k2, x, y, kab, mac(kab, <'A', 'B', y>), mac(kab, <'B', 'A', x>))
    , Out(mac(kab, <'B', 'A', x>))
    ]

rule A_4_Receive:
    [ St_A_4(A, id, B, k1, k2, x, y, kab, mac(kab, <'A', 'B', y>))
    , In(mac(k2, <'B', 'A', x, y>))
    ]
  --[ Recv(A, mac(kab, <'B', 'A', x>))
      , Eq(vfy(k2, mac(kab, <'B', 'A', x>), <'A', 'B', x>), true)
      , Authenticated(B, A)
      , Commit(A, B, <'I', 'R', x, y>)
      , Secret(A, B, kab)
    ]->
    [ St_A_5(A, id, B, k1, k2, x, y, kab, mac(kab, <'A', 'B', y>), mac(kab, <'B', 'A', x>))
    ]

// restrictions
restriction Equality:
	"All x y #i. Eq(x,y) @i ==> x = y"

restriction KeyUnidirection:
  "All A B k1 k2 #i. 
    UniDKey(A, B, k1)@i &
    UniDKey(B, A, k2)@i &
    not (A = B) ==> not (k1 = k2)"

restriction UnidirectionalKeys:
    "All a b c k1 k2 #i.
      Create(a, b, c, k1, k2) @i
      & k1 = k2
        ==> F"
    

// Security Properties
lemma Executability:
  exists-trace
    "Ex A B #i #j. 
       Authenticated(A, B)@i & Authenticated(B, A)@j & not (A = B) & not (#i = #j)"

lemma injectiveagreementINITIATOR:
  "All a b t #i.
      Commit(a,b,<'I','R',t>)@i &
      not ((Ex #r. Reveal(a)@r) | (Ex #r. Reveal(b)@r))
      ==> (Ex #j. Running(b,a,<'I','R',t>)@j
          & not (Ex a2 b2 #i2. Commit(a2,b2,<'I','R',t>)@i2
          & not (#i2 = #i)))"

lemma injectiveagreementRESPONDER:
  "All a b t #i.
      Commit(a,b,<'R','I',t>)@i &
      not ((Ex #r. Reveal(a)@r) | (Ex #r. Reveal(b)@r))
      ==> (Ex #j. Running(b,a,<'R','I',t>)@j
          & not (Ex a2 b2 #i2. Commit(a2,b2,<'R','I',t>)@i2
          & not (#i2 = #i)))"

lemma secrecy:
  "All A B x #i.
      Secret(A,B,x)@i &
      not ((Ex #r. Reveal(A)@r) | (Ex #r. Reveal(B)@r))
      ==> not (Ex #j. K(x)@j)"
        

end

