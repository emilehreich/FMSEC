theory OTR3
begin

section{* 2.3 OTR - Improvement *}

/*
    Protocol
        A → B : '1', g^x, Sign_skA ('initiator', g^x, B), vkA
        B → A : '2', g^y, Sign_skB ('responder', g^y, A), vkB
        
*/

builtins: 
    signing, diffie-hellman


// Public Key Infrastructure

rule Register_Keys:
    [Fr(~ltk)
    ]
  --[RLTK($A, ~ltk)
    ]->
    [!Ltk($A, ~ltk), !Pk($A, pk(~ltk)), Out(pk(~ltk))]


rule Reveal_ltk:
    [ !Ltk(A, ltk)
    ]
  --[ Reveal(A)
    ]->
    [ Out(ltk)
    ]

// -- Protocol Rules -- 
// Thread Initialization

rule Init_A:
    [ Fr(~id)
    , !Ltk(A, ltkA)
    , !Pk(B, pkB)
    ]
  --[ Create(A, ~id, 'Alice')
    ]->
    [ St_A_1(A, ~id, ltkA, B, pkB)
    ]

rule Init_B:
    [ Fr(~id)
    , !Ltk(B, ltkB)
    , !Pk(A, pkA)
    ]
  --[ Create(B, ~id, 'Bob')
    ]->
    [ St_B_1(B, ~id, ltkB, A, pkA)
    ]

rule A_1_Send:
    [ St_A_1(A, id, ltkA, B, pkB)
    , Fr(~x)
    ]
  --[ Send(A, B, <'1', 'g'^~x, sign(<'initiator', 'g'^~x, B>, ltkA), pk(ltkA)>)
    , Running(A, B, <'R', 'I', 'g'^~x>)
    ]->
    [ St_A_2(A, id, ltkA, B, pkB, ~x)
    , Out(<'1', 'g'^~x, sign(<'initiator', 'g'^~x, B>, ltkA), pk(ltkA)>)
    ]

rule B_1_Receive:
    [ St_B_1(B, id, ltkB, A, pkA)
    , In(<'1', gx, s, pkA>)
    ]
  --[ Receive(B, A, <gx, s, pkA>)
    , Eq(verify(s, <'initiator', gx, B>, pkA), true)
    , Commit(B, A, <'R', 'I', gx>)
    ]->
    [ St_B_2(B, id, ltkB, A, pkA, gx)
    ]

rule B_2_Send:
    [ St_B_2(B, id, ltkB, A, pkA, gx)
    , Fr(~y)
    ]
  --[ Send(B, A, <'2', 'g'^~y, sign(<'responder', 'g'^~y, A>, ltkB), pk(ltkB)>)
    , Running(B, A, <'I', 'R', gx^~y>)
    , Secret(B, A, gx^~y)
    ]->
    [ St_B_3(B, id, ltkB, A, pkA, ~y)
    , Out(<'2', 'g'^~y, sign(<'responder','g'^~y, A>, ltkB), pk(ltkB)>)
    ]

rule A_2_Receive:
    [ St_A_2(A, id, ltkA, B, pkB, x)
    , In(<'2', gy, s, pkB>)
    ]
  --[ Receive(A, B, <gy, s, pkB>)
    , Eq(verify(s, <'responder', gy, A>, pkB), true)
    , Commit(A, B, <'I', 'R', gy^x>)
    , Secret(A, B, gy^x)
    , Authenticated(A, B)
    ]->
    [ St_A_3(A, id, ltkA, B, pkB, x, gy)
    ]


// restrictions
restriction Equality:
	"All x y #i. Eq(x,y) @i ==> x = y"

restriction Key_Uniqueness:
  "All A x y #i #j. RLTK(A, x) @i & RLTK(A, y) @j ==> x = y"

// Security Properties

// Verified
lemma Executability:
  exists-trace
    "Ex a b #i. Authenticated(a, b) @i & not (a = b)
    & (All C D id1 id2 #j #k. Create(C, id1, 'Alice') @j & Create(D, id2, 'Alice') @k ==> id1 = id2)
    & (All E F id3 id4 #l #m. Create(E, id3, 'Bob') @l & Create(F, id4, 'Bob') @m ==> id3 = id4)
    & not(Ex X #n. Reveal(X) @n)
    "

// Falsified
lemma injectiveagreementINITIATOR:
    "All a b t #i.
        Commit(a,b,<'I','R',t>)@i &
        not ((Ex #r. Reveal(a)@r) | (Ex #r. Reveal(b)@r))
        ==> (Ex #j. Running(b,a,<'I','R',t>)@j
            & not (Ex a2 b2 #i2. Commit(a2,b2,<'I','R',t>)@i2
            & not (#i2 = #i)))"

// Falsified
lemma injectiveagreementRESPONDER:
    "All a b t #i.
        Commit(a,b,<'R','I',t>)@i &
        not ((Ex #r. Reveal(a)@r) | (Ex #r. Reveal(b)@r))
        ==> (Ex #j. Running(b,a,<'R','I',t>)@j
            & not (Ex a2 b2 #i2. Commit(a2,b2,<'R','I',t>)@i2
            & not (#i2 = #i)))"
  
// Verified
lemma secrecy:
    "All A B x #i.
        Secret(A,B,x)@i &
        not ((Ex #r. Reveal(A)@r) | (Ex #r. Reveal(B)@r))
        ==> not (Ex #j. K(x)@j)"
  
// Verified
lemma secrecy_PFS:
    "All A B x #i.
        Secret(A,B,x)@i &
        not ((Ex #r. Reveal(A)@r & r < i) |
        (Ex #r. Reveal(B)@r & r < i))
        ==> not (Ex #j. K(x)@j)"
  
// Falsified
lemma noninjectiveagreementINITIATOR:
      "All a b t #i.
          Commit(a,b,<'I','R',t>)@i &
          not ((Ex #r. Reveal(a)@r) | (Ex #r. Reveal(b)@r))
          ==> (Ex #j. Running(b,a,<'I','R',t>)@j)"
  
// Verified
lemma noninjectiveagreementRESPONDER:
      "All a b t #i.
          Commit(a,b,<'R','I',t>)@i &
          not ((Ex #r. Reveal(a)@r) | (Ex #r. Reveal(b)@r))
          ==> (Ex #j. Running(b,a,<'R','I',t>)@j)"


end